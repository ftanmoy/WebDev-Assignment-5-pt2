{"version":3,"sources":["components/City.jsx","App.js","reportWebVitals.js","index.js"],"names":["City","Zipcode","value","className","map","zipcode","App","useState","cityName","setCityName","input","setInput","cities","setCities","error","setError","useEffect","a","linkToAPI","axios","get","response","data","para","document","createElement","id","innerHTML","status","getElementById","appendChild","handleSearch","placeholder","type","onChange","e","target","onKeyPress","event","key","lastElement","removeChild","toUpperCase","search","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QAEaA,EAAO,SAACC,GAGjB,MAAqB,IAAjBA,EAAQC,MACD,wBAKH,sBAAKC,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,SACI,iEAEJ,qBAAKA,UAAU,cAGf,qBAAKA,UAAU,MAAf,SACI,8BACI,6BACKF,EAAQC,MAAME,KAAI,SAAAC,GACf,OAAO,mCAAMA,kB,MCuE9BC,MAxFf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIeN,mBAAS,IAJxB,mBAIJO,EAJI,KAIGC,EAJH,KA+Db,OAzDEC,qBAAU,YACQ,uCAAG,gCAAAC,EAAA,yDACA,KAAbT,EADa,wDAIbU,EAAY,0CAA4CV,EAJ3C,kBAQMW,IAAMC,IAAIF,GARhB,OAQXG,EARW,OAUbR,EAAUQ,EAASC,MAVN,sDAaX,KAAMD,SAbK,wBAeXN,EAAS,EAAD,KACJQ,EAAOC,SAASC,cAAc,MAC7BC,GAAK,IACVH,EAAKI,UAAY,kCAAoCnB,EAAW,UAAY,KAAMa,SAASC,KAAO,MAC5F,KAAMD,SAASO,OAnBV,kBAoBJJ,SAASK,eAAe,WAAWC,YAAYP,IApB3C,0DAAH,qDAyBhBQ,KACC,CAACvB,IA+BJ,sBAAKkB,GAAG,kBAAR,UACE,qBAAKA,GAAG,SAAR,SACE,qBAAKA,GAAG,cAAR,SACE,oEAGF,sBAAKA,GAAG,aAAR,UACE,gDAGA,uBAAOvB,UAAU,mBAAmB6B,YAAY,gBAAgBC,KAAK,OAAOC,SAjC7D,SAACC,GAClBxB,EAASwB,EAAEC,OAAOlC,OAElBW,EAAU,IACVJ,EAAY,KA8BH4B,WAAY,SAAAC,GACG,UAAdA,EAAMC,KAzBL,WACX,GAAc,KAAVzB,GAA0B,KAAVJ,EAAa,CAC7B,IAAI8B,EAAehB,SAASK,eAAe,KAC3CL,SAASK,eAAe,WAAWY,YAAYD,GAC/CzB,EAAS,IAGbN,EAAYC,EAAMgC,eAmBRC,SAIV,qBAAKjB,GAAG,UAAR,SA5CO,cAAC,EAAD,CAA0BxB,MAAOU,GAAtBA,EAAOgC,cC9BlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASK,eAAe,SAM1BgB,M","file":"static/js/main.f82ed048.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const City = (Zipcode) => {\r\n\r\n    //essentially I want to make the page look clean so when nothing is passed in we only see the input bar.\r\n    if (Zipcode.value == '') {\r\n        return <div></div>\r\n    }\r\n    //if something is passed in with valid value show the Zipcodes.\r\n    else {\r\n        return (\r\n            <div className=\"info-card\">\r\n                <div className=\"card-header\">\r\n                    <strong> Zipcodes for this City: </strong>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                </div>\r\n\r\n                <div className=\"lol\">\r\n                    <div>\r\n                        <ul>\r\n                            {Zipcode.value.map(zipcode => {\r\n                                return <ul> {zipcode}</ul>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { City } from \"./components/City\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  const [cities, setCities] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n    const handleSearch = async () => {\r\n        if (cityName === \"\") return;\r\n\r\n        //creating a link to call the api\r\n        let linkToAPI = \"https://ctp-zip-api.herokuapp.com/city/\" + cityName;\r\n\r\n        try {\r\n            //calling api\r\n          let response = await axios.get(linkToAPI);\r\n          //storing the response\r\n            setCities(response.data);\r\n\r\n        } catch (error) {\r\n          if (error.response) {\r\n              //creating a child element to show the error message.\r\n              setError(error);\r\n              var para = document.createElement('P');\r\n              para.id = 'P'\r\n              para.innerHTML = 'Ooooppps ... ZipCode for city \"' + cityName + '\"  was ' + error.response.data + \" : \"\r\n                  + error.response.status;\r\n              return document.getElementById(\"results\").appendChild(para);\r\n          }\r\n        }\r\n      };\r\n\r\n      handleSearch();\r\n    }, [cityName]);\r\n\r\n    //displaying the response to the user in readable format\r\n    const generateCities = () => {\r\n       return  <City key={cities.length} value={cities}/>;\r\n    };\r\n\r\n    //collecting all characters until user hits enter to call the api in search()\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n        //resetting city so the page is reset and setting all user input characters to capital case and saving it.\r\n        setCities([]);\r\n        setCityName(\"\");\r\n\r\n\r\n    }\r\n\r\n    // searching will reset all existing values and only hit the api once the user hits enter\r\n    const search = () => {\r\n        if( error !== '' && input !== ''){\r\n            var lastElement =  document.getElementById('P');\r\n            document.getElementById(\"results\").removeChild(lastElement);\r\n            setError(\"\");\r\n        }\r\n\r\n        setCityName(input.toUpperCase());\r\n        \r\n    }\r\n    //user has to press enter to see results.\r\n\r\n  return (\r\n    <div id=\"content-wrapper\">\r\n      <div id=\"header\">\r\n        <div id=\"header-text\">\r\n          <h1>Find the Zipcode for Your City</h1>\r\n        </div>\r\n      </div>\r\n        <div id=\"search-box\">\r\n          <label>\r\n            Enter City:\r\n          </label>\r\n          <input className=\"search-box-field\" placeholder=\"Enter a City!\" type=\"text\" onChange={handleChange}\r\n                 onKeyPress={event => {\r\n              if (event.key === 'Enter') {\r\n                  search()\r\n              }\r\n          }}/>\r\n      </div>\r\n        <div id=\"results\">\r\n      {generateCities()}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}